// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sqlc_model

import (
	"context"
)

const addURL = `-- name: AddURL :exec
INSERT INTO urls (id, value, via, hops)
VALUES (?, ?, ?, ?)
`

type AddURLParams struct {
	ID    string
	Value string
	Via   string
	Hops  int64
}

func (q *Queries) AddURL(ctx context.Context, arg AddURLParams) error {
	_, err := q.db.ExecContext(ctx, addURL,
		arg.ID,
		arg.Value,
		arg.Via,
		arg.Hops,
	)
	return err
}

const claimThisURL = `-- name: ClaimThisURL :exec
UPDATE urls
SET status = 'CLAIMED', timestamp = strftime('%s', 'now')
WHERE id = ?
`

func (q *Queries) ClaimThisURL(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, claimThisURL, id)
	return err
}

const deleteURL = `-- name: DeleteURL :exec
DELETE FROM urls
WHERE id = ?
`

func (q *Queries) DeleteURL(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteURL, id)
	return err
}

const doneURL = `-- name: DoneURL :exec
UPDATE urls
SET status = 'DONE', timestamp = strftime('%s', 'now')
WHERE id = ?
`

func (q *Queries) DoneURL(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, doneURL, id)
	return err
}

const getFreshURLs = `-- name: GetFreshURLs :many
SELECT id, value, via, hops, status, timestamp FROM urls
WHERE status = 'FRESH'
LIMIT ?
`

func (q *Queries) GetFreshURLs(ctx context.Context, limit int64) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, getFreshURLs, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.Via,
			&i.Hops,
			&i.Status,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetURL = `-- name: ResetURL :exec
UPDATE urls
SET status = 'FRESH', timestamp = strftime('%s', 'now')
WHERE id = ?
`

func (q *Queries) ResetURL(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, resetURL, id)
	return err
}
